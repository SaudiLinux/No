import requests
import json
import time
import random
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup
import socket
import ssl
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime
import re

class VulnerabilityScanner:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
        # أنماط الثغرات
        self.vulnerability_patterns = {
            'sql_injection': {
                'payloads': [
                    "' OR 1=1--",
                    "' UNION SELECT NULL--",
                    "admin'--",
                    "1' OR '1'='1",
                    "' OR 'a'='a"
                ],
                'indicators': [
                    'mysql_fetch_array',
                    'ORA-',
                    'Microsoft OLE DB Provider',
                    'SQLServer JDBC Driver',
                    'PostgreSQL query failed',
                    'supplied argument is not a valid MySQL result'
                ]
            },
            'xss': {
                'payloads': [
                    "<script>alert('XSS')</script>",
                    "javascript:alert('XSS')",
                    "<img src=x onerror=alert('XSS')>",
                    "<svg onload=alert('XSS')>",
                    "'\"><script>alert('XSS')</script>"
                ],
                'indicators': [
                    '<script>alert(',
                    'javascript:alert(',
                    'onerror=alert(',
                    'onload=alert('
                ]
            },
            'lfi': {
                'payloads': [
                    "../../../etc/passwd",
                    "....//....//....//etc/passwd",
                    "/etc/passwd",
                    "....//....//....//windows/system32/drivers/etc/hosts",
                    "....//....//....//windows/win.ini"
                ],
                'indicators': [
                    'root:x:',
                    'daemon:x:',
                    'bin:x:',
                    '[boot loader]',
                    '[fonts]'
                ]
            },
            'open_redirect': {
                'payloads': [
                    "//evil.com",
                    "https://evil.com",
                    "evil.com",
                    "http://malicious.com"
                ],
                'indicators': [
                    'evil.com',
                    'malicious.com',
                    'Location: evil.com'
                ]
            }
        }
        
        # نقاط الاختبار الشائعة
        self.test_endpoints = [
            'search', 'login', 'admin', 'user', 'id', 'page', 'file', 'dir',
            'path', 'url', 'redirect', 'return', 'continue', 'target'
        ]
    
    def get_forms(self, url):
        """استخراج النماذج من الصفحة"""
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            forms = []
            
            for form in soup.find_all('form'):
                form_info = {
                    'action': form.get('action', ''),
                    'method': form.get('method', 'GET').upper(),
                    'inputs': []
                }
                
                for input_tag in form.find_all(['input', 'textarea', 'select']):
                    input_info = {
                        'name': input_tag.get('name', ''),
                        'type': input_tag.get('type', 'text'),
                        'value': input_tag.get('value', '')
                    }
                    form_info['inputs'].append(input_info)
                
                forms.append(form_info)
            
            return forms
        except Exception as e:
            print(f"خطأ في استخراج النماذج من {url}: {e}")
            return []
    
    def test_sql_injection(self, url, forms):
        """اختبار ثغرات SQL Injection"""
        vulnerabilities = []
        
        for form in forms:
            for payload in self.vulnerability_patterns['sql_injection']['payloads']:
                try:
                    # إنشاء بيانات النموذج
                    data = {}
                    for input_field in form['inputs']:
                        if input_field['name']:
                            data[input_field['name']] = payload
                    
                    # إرسال الطلب
                    target_url = urljoin(url, form['action'])
                    if form['method'] == 'POST':
                        response = self.session.post(target_url, data=data, timeout=10)
                    else:
                        response = self.session.get(target_url, params=data, timeout=10)
                    
                    # فحص مؤشرات الثغرة
                    for indicator in self.vulnerability_patterns['sql_injection']['indicators']:
                        if indicator.lower() in response.text.lower():
                            vulnerabilities.append({
                                'type': 'SQL Injection',
                                'url': target_url,
                                'payload': payload,
                                'indicator': indicator,
                                'method': form['method']
                            })
                            break
                
                except Exception as e:
                    continue
        
        return vulnerabilities
    
    def test_xss(self, url, forms):
        """اختبار ثغرات XSS"""
        vulnerabilities = []
        
        for form in forms:
            for payload in self.vulnerability_patterns['xss']['payloads']:
                try:
                    data = {}
                    for input_field in form['inputs']:
                        if input_field['name']:
                            data[input_field['name']] = payload
                    
                    target_url = urljoin(url, form['action'])
                    if form['method'] == 'POST':
                        response = self.session.post(target_url, data=data, timeout=10)
                    else:
                        response = self.session.get(target_url, params=data, timeout=10)
                    
                    # فحص إذا تم تنفيذ السكربت
                    for indicator in self.vulnerability_patterns['xss']['indicators']:
                        if indicator in response.text:
                            vulnerabilities.append({
                                'type': 'XSS',
                                'url': target_url,
                                'payload': payload,
                                'indicator': indicator,
                                'method': form['method']
                            })
                            break
                
                except Exception as e:
                    continue
        
        return vulnerabilities
    
    def test_lfi(self, url):
        """اختبار ثغرات LFI"""
        vulnerabilities = []
        
        # نقاط الاختبار
        test_params = ['file', 'page', 'path', 'dir', 'template', 'include']
        
        for param in test_params:
            for payload in self.vulnerability_patterns['lfi']['payloads']:
                try:
                    test_url = f"{url}?{param}={payload}"
                    response = self.session.get(test_url, timeout=10)
                    
                    for indicator in self.vulnerability_patterns['lfi']['indicators']:
                        if indicator in response.text:
                            vulnerabilities.append({
                                'type': 'LFI',
                                'url': test_url,
                                'parameter': param,
                                'payload': payload,
                                'indicator': indicator
                            })
                            break
                
                except Exception as e:
                    continue
        
        return vulnerabilities
    
    def test_open_redirect(self, url):
        """اختبار ثغرات Open Redirect"""
        vulnerabilities = []
        
        redirect_params = ['return', 'redirect', 'url', 'continue', 'target', 'next']
        
        for param in redirect_params:
            for payload in self.vulnerability_patterns['open_redirect']['payloads']:
                try:
                    test_url = f"{url}?{param}={payload}"
                    response = self.session.get(test_url, timeout=10, allow_redirects=False)
                    
                    # فحص وجود إعادة توجيه
                    if response.status_code in [301, 302, 307]:
                        location = response.headers.get('Location', '')
                        if 'evil.com' in location or 'malicious.com' in location:
                            vulnerabilities.append({
                                'type': 'Open Redirect',
                                'url': test_url,
                                'parameter': param,
                                'payload': payload,
                                'redirect_to': location
                            })
                
                except Exception as e:
                    continue
        
        return vulnerabilities
    
    def check_ssl_certificate(self, url):
        """فحص شهادة SSL"""
        try:
            parsed = urlparse(url)
            hostname = parsed.hostname
            port = parsed.port or 443
            
            context = ssl.create_default_context()
            with socket.create_connection((hostname, port), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                    cert = ssock.getpeercert()
                    return {
                        'subject': dict(x[0] for x in cert['subject']),
                        'issuer': dict(x[0] for x in cert['issuer']),
                        'version': cert['version'],
                        'serial_number': cert['serialNumber'],
                        'not_before': cert['notBefore'],
                        'not_after': cert['notAfter']
                    }
        except Exception as e:
            return {'error': str(e)}
    
    def scan_website(self, url):
        """مسح موقع كامل للثغرات"""
        print(f"بدء مسح: {url}")
        
        results = {
            'url': url,
            'scan_time': datetime.now().isoformat(),
            'vulnerabilities': [],
            'ssl_info': None,
            'forms': [],
            'error': None
        }
        
        try:
            # فحص SSL
            results['ssl_info'] = self.check_ssl_certificate(url)
            
            # استخراج النماذج
            forms = self.get_forms(url)
            results['forms'] = forms
            
            # اختبار الثغرات
            if forms:
                sql_vulns = self.test_sql_injection(url, forms)
                xss_vulns = self.test_xss(url, forms)
                results['vulnerabilities'].extend(sql_vulns)
                results['vulnerabilities'].extend(xss_vulns)
            
            # اختبار LFI
            lfi_vulns = self.test_lfi(url)
            results['vulnerabilities'].extend(lfi_vulns)
            
            # اختبار Open Redirect
            redirect_vulns = self.test_open_redirect(url)
            results['vulnerabilities'].extend(redirect_vulns)
            
            print(f"اكتمل مسح: {url} - تم العثور على {len(results['vulnerabilities'])} ثغرة محتملة")
            
        except Exception as e:
            results['error'] = str(e)
            print(f"خطأ في مسح {url}: {e}")
        
        return results
    
    def scan_multiple_websites(self, urls, max_threads=5):
        """مسح عدة مواقع"""
        all_results = []
        
        with ThreadPoolExecutor(max_workers=max_threads) as executor:
            future_to_url = {
                executor.submit(self.scan_website, url): url 
                for url in urls
            }
            
            for future in as_completed(future_to_url):
                result = future.result()
                all_results.append(result)
        
        return all_results

if __name__ == "__main__":
    scanner = VulnerabilityScanner()
    
    # اختبار على موقع وهمي
    test_urls = [
        'https://httpbin.org',
        'https://jsonplaceholder.typicode.com'
    ]
    
    results = scanner.scan_multiple_websites(test_urls)
    
    # حفظ النتائج
    with open('results/vulnerability_scan.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print("تم حفظ نتائج المسح في results/vulnerability_scan.json")